{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","Form","onSubmit","loadWeather","type","name","placeholder","Weather","country","city","temperature","Math","floor","humidity","description","error","api_key","App","state","undefined","getWeather","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","titles","components_form","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PASeA,EAPA,SAACC,GACb,OAAQC,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,2DCOSC,EAVF,SAAAJ,GAAK,OAEfC,EAAAC,EAAAC,cAAA,QAAME,SAAUL,EAAMM,aACnBL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3CR,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9CR,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,eACAN,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAAb,WCISG,EAXC,SAACV,GACd,OACGC,EAAAC,EAAAC,cAAA,WACIH,EAAMW,SAAWX,EAAMY,MAAQX,EAAAC,EAAAC,cAAA,sBAAcH,EAAMY,KAApB,KAA4BZ,EAAMW,SACjEX,EAAMa,aAAeZ,EAAAC,EAAAC,cAAA,yBAAiBW,KAAKC,MAAMf,EAAMa,YAAc,KAAhD,UACrBb,EAAMgB,UAAYf,EAAAC,EAAAC,cAAA,sBAAcH,EAAMgB,SAApB,MAClBhB,EAAMiB,aAAehB,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMiB,aAC5CjB,EAAMkB,OAASjB,EAAAC,EAAAC,cAAA,SAAIH,EAAMkB,SCH7BC,EAAU,mCAmDDC,6MAhDbC,MAAQ,CACNR,iBAAaS,EACbV,UAAMU,EACNX,aAASW,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,KAGTC,iDAAa,SAAAC,EAAOC,GAAP,IAAAb,EAAAD,EAAAe,EAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACLpB,EAAOa,EAAEQ,OAAOC,SAAStB,KAAKuB,MAC9BxB,EAAUc,EAAEQ,OAAOC,SAASvB,QAAQwB,MAC1CV,EAAEW,iBAHSN,EAAAE,KAAA,EAIYK,MAAK,oDAAAC,OAAqD1B,EAArD,KAAA0B,OAA6D3B,EAA7D,WAAA2B,OAA8EnB,IAJ/F,cAILO,EAJKI,EAAAS,KAAAT,EAAAE,KAAA,EAKYN,EAASc,OALrB,OAKLb,EALKG,EAAAS,KAMXE,QAAQC,IAAIf,GACRf,GAAQD,EACVgC,EAAKC,SAAS,CACZ/B,YAAac,EAASkB,KAAKC,KAC3BlC,KAAMe,EAASnB,KACfG,QAASgB,EAASoB,IAAIpC,QACtBK,SAAUW,EAASkB,KAAK7B,SACxBC,YAAaU,EAASqB,QAAQ,GAAG/B,YACjCC,MAAO,KAGTyB,EAAKC,SAAS,CACZ1B,MAAO,kCAlBA,yBAAAY,EAAAmB,SAAAzB,oIAwBX,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+C,EAAD,MACAjD,EAAAC,EAAAC,cAACgD,EAAD,CAAM7C,YAAa8C,KAAK7B,aACxBtB,EAAAC,EAAAC,cAAC6C,EAAD,CACEnC,YAAauC,KAAK/B,MAAMR,YACxBD,KAAMwC,KAAK/B,MAAMT,KACjBD,QAASyC,KAAK/B,MAAMV,QACpBK,SAAUoC,KAAK/B,MAAML,SACrBC,YAAamC,KAAK/B,MAAMJ,YACxBC,MAAOkC,KAAK/B,MAAMH,gBA7CVmC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca8f566f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = (props) => {\r\n   return (<div>\r\n      <h1>Weather App</h1>\r\n      <p>Get weather report from all around the globe</p>\r\n   </div>\r\n   )\r\n}\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = props => (\r\n\r\n   <form onSubmit={props.loadWeather}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n      <input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n      <button type=\"submit\">Get Weather</button>\r\n      <button type=\"reset\">Reset</button>\r\n   </form>\r\n\r\n)\r\nexport default Form;","import React from 'react';\r\nconst Weather = (props) => {\r\n   return (\r\n      <div>\r\n         {props.country && props.city && <p>Location: {props.city}, {props.country}</p>}\r\n         {props.temperature && <p>Temperature: {Math.floor(props.temperature - 273)} Â°C</p>}\r\n         {props.humidity && <p>Humidity: {props.humidity} %</p>}\r\n         {props.description && <p>Conditions:  {props.description}</p>}\r\n         {props.error && <p>{props.error}</p>}\r\n      </div>\r\n   )\r\n}\r\nexport default Weather;","import React from 'react';\nimport Titles from './components/titles';\nimport Form from './components/form';\nimport Weather from './components/weather';\n\nconst api_key = \"9228bd5801440681840cfcf7959dcd24\";\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${api_key}`);\n    const response = await api_call.json();\n    console.log(response);\n    if (city && country) {\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Titles />\n        <Form loadWeather={this.getWeather} />\n        <Weather\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error} />\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}